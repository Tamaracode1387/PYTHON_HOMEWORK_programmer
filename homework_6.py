# Задача: предложить улучшения кода для четырёх уже решённых задач
# из семинаров №№2 - 5 с помощью использования лямбд, filter, map, zip, enumerate, list comprehension

########################################################################################################

# 1. Задайте строку из набора чисел. Напишите программу, которая покажет большее и меньшее число. В качестве
# символа-разделителя используйте пробел.

# some_str = input()
# print(max(list(map(int, some_str.split()))), min(list(map(int, some_str.split()))))

#########################################################################################################

# 2. Дана последовательность чисел. Получить список уникальных элементов заданной последовательности.
# Пример:
# [1, 2, 3, 5, 1, 5, 3, 10] => [2, 10]

# my_list = [1, 1, 2, 3, 4, 4, 5]
# print(tuple(filter(lambda num: my_list.count(num) == 1, my_list)))

###########################################################################################################

# 3. Дана последовательность чисел. Нужно выбрать четные и составить список пар (число; квадрат числа)

# def select(f, col):
#     return [f(x) for x in col]

# def where (f, col):
#     return [x for x in col if f(x)]

# data = '1 2 3 4 5 6 7'.split()

# result = select(int, data)
# result = where(lambda x: not x % 2, result)
# result = select(lambda x: (x, x**2), result)
# print(result)

###########################################################################################################

# 4. Найти сумму чисел списка стоящих на нечетной позиции

# my_list = [1, 1, 2, 3, 4, 4, 5]
# print(my_list)
# sum_list = sum(my_list[item] for item in range(1, len(my_list), 2))
# print(f'Cумма чисел, стоящих на нечётных позициях равна {sum_list}.')